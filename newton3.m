//We examine first examine the curve X defined by the equations (y^3 - y = x^2, z^3 - z = -(y^7 - y^5 - x^4*y - x^2*y^2).

//Note that k(X) contains the subfield generated by x^2, y, z; it defines a curve of genus 14 over F_3, which is within the range that Magma can handle. 
//We begin by calculating the slopes of that curve, which are contained in the full list of slopes of X.

F0<x> := FunctionField(GF(3));
R0<Y> := PolynomialRing(F0);
F1<y> := ext<F0|Y^3-Y-1/x>;
R1<Z> := PolynomialRing(F1);
F2<z> := ext<F1|Z^3-Z- (y^7 - y^5 - (x)^2*y - (x)*y^2)>;
Genus(F2);
LPolynomial(F2);


4782969*$.1^28 + 708588*$.1^25 + 708588*$.1^24 - 118098*$.1^23 +
183708*$.1^22 +
    91854*$.1^21 + 69984*$.1^20 - 10206*$.1^19 + 41553*$.1^18 +
13608*$.1^17 +
    3726*$.1^16 + 972*$.1^15 + 8073*$.1^14 + 324*$.1^13 + 414*$.1^12 +
504*$.1^11 +
    513*$.1^10 - 42*$.1^9 + 96*$.1^8 + 42*$.1^7 + 28*$.1^6 - 6*$.1^5 +
12*$.1^4 +
    4*$.1^3 + 1

//The slopes that appear are 0 (x6), 1/3 (x6), 1/2 (x4), 2/3 (x6), 1 (x6).
//That L-polynomial is a factor of the L-polynomial of X. 

F0<x> := FunctionField(GF(3));
R0<Y> := PolynomialRing(F0);
F1<y> := ext<F0|Y^3-Y-1/x^2>;
R1<Z> := PolynomialRing(F1);
F2<z> := ext<F1|Z^3-Z- (y^7 - y^5 - (x^2)^2*y - (x^2)*y^2)>;
Genus(F2);


//This is too big for Magma to compute the zeta function by counting points on F_{3^n} for n up to 29. But one can at least count points over some of these (the function is NumberOfPlacesOfDegreeOneECF) and then recover the first few coefficients of the L-polynomial:

1 + 3*T^2 + 4*T^3 + 6*T^5 + 40*T^6 - 24*T^7 + 144*T^8 + 60*T^9 +
636*T^10 + 450*T^11 + 2316*T^12 + 2520*T^13 + 6228*T^14 + 2250*T^15 +
35100*T^16 + ...

//By dividing in the ring of power series, we get the first few slopes of the complementary factor.

1 + 3*T^2 - 12*T^4 - 24*T^6 + 108*T^8 + 459*T^10 + 891*T^12 - 3159*T^14
- 9477*T^16 + ...

//We then compute the Newton polygon, 

//Thanks to Kiran Kedlaya for explaining the process of implementing this without having to do the explicit point counts and then input those by hand.

//We wish to calculate the Newton polygon of an Artin-Schreier-Witt curve. The following code allows us to do that.



u:= LPolynomial(F2);
NP := AllVertices(u, 3);
